# -*- coding: utf-8 -*-
"""
Loads a tiff into an embedded pyqtgraph widget made in Qt Designer
and converted with pyuic5
"""

import sys
from imageio import volread
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QFileDialog, QFileSystemModel
from pyqtgraph.Qt import QtGui, QtCore, USE_PYSIDE, USE_PYQT5
import numpy as np
import pyqtgraph as pg
import pyqtgraph.ptime as ptime

from QtDesigner.Custom.pyqtgraphVideo.MainWindow import Ui_MainWindow


class VideoMainWindow(QMainWindow, Ui_MainWindow):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(VideoMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)

        file, mask = QFileDialog.getOpenFileName(self, 'Open a .tif/.tiff stack')
        self.img = volread(file)  # Read image data

        # connect the signals with the slots
        # self.actionLoad.triggered.connect(self.open_tiff)
        # self.actionClose.triggered.connect(self.close)
        # self.actionTIFF.triggered.connect(self.open_tiff)
        # self.actionFolder.triggered.connect(self.open_folder)
        # self.actionStart_ImageProcess.triggered.connect(self.image_process)

        self.ptr = 0
        self.lastTime = ptime.time()
        self.fps = None

        timer = QtCore.QTimer()
        timer.timeout.connect(self.update)
        timer.start(0)


    def update(self):

        self.graphicsView.rawImg.setImage(self.img[self.ptr % self.img.shape[0]])

        self.ptr += 1
        now = ptime.time()
        dt = now - self.lastTime
        lastTime = now
        if self.fps is None:
            fps = 1.0 / dt
        else:
            s = np.clip(dt * 3., 0, 1)
            self.fps = self.fps * (1 - s) + (1.0 / dt) * s
        # ui.fpsLabel.setText('%0.2f fps' % fps)
        app.processEvents()  ## force complete redraw for every plot



# create the GUI application
app = QApplication(sys.argv)
# instantiate the main window
dmw = VideoMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code as the Qt application
sys.exit(app.exec_())
