# -*- coding: utf-8 -*-
# GUI to open tiff stacks

# used to parse files more easily
from __future__ import with_statement
# Numpy module
import numpy as np
# for command-line arguments
import sys, os
from pathlib import PurePath
from skimage import io
import random
# Qt5 bindings for core Qt functionalities (non-GUI)
from PyQt5 import QtCore
# Python Qt4 bindings for GUI objects
from PyQt5 import QtGui
from PyQt5.QtCore import QDir
from PyQt5.QtWidgets import QApplication, QWidget, QMainWindow, QMdiSubWindow, QFileDialog, QFileSystemModel,\
    QTreeView, QTextEdit
# import the MainWindow widget from the converted .ui files
from camatMainMDI import Ui_MDIMainWindow
from camatWidgetTIFF import Ui_WidgetTiff
from camatWidgetFolderTree import Ui_WidgetFolderTree


class DesignerMainWindow(QMainWindow, Ui_MDIMainWindow):
    """Customization for Qt Designer created window"""

    def __init__(self, parent=None):
        # initialization of the superclass
        super(DesignerMainWindow, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        # connect the signals with the slots
        # self.actionLoad.triggered.connect(self.open_tiff)
        # self.actionClose.triggered.connect(self.close)
        self.actionTIFF.triggered.connect(self.open_tiff)
        self.actionFolder.triggered.connect(self.open_folder)

    def open_tiff(self, file=None):
        """Open a SubWindow with a TIFF stack in the main MDI area"""
        if file is None:
            # Use a QFileDialog to get filepath if none provided
            filepath, mask = QFileDialog.getOpenFileName(self, 'Open a .tif/.tiff stack')
        else:
            filepath = file

        print('File chosen! path: ' + filepath)
        if filepath:
            # filename, file_extension = os.path.splitext(filepath)
            f = PurePath(filepath)
            fname = f.stem
            fext = f.suffix
            print('file ext: ' + fname + ' ' + fext)
            if fext is '.tif' or '.tiff':
                print('TIFF chosen')
                # Create QMdiSubWindow with Ui_WidgetTiff
                sub = DesignerSubWindowTiff(filepath=filepath)
                print('DesignerSubWindowTiff "sub" created')
                print('Set "sub" widget to "Ui_WidgetTiff"')
                sub.setWindowTitle("TIFF View: " + filepath)
                self.mdiArea.addSubWindow(sub)
                print('"sub" added to MDI')
                sub.show()

    def open_tiff_from_folder(self, file):
        self.open_tiff(file)

    def open_folder(self):
        """Open a SubWindow with a folder tree view in the main MDI area"""
        folderpath = QFileDialog.getExistingDirectory(self, 'Choose a folder to view')
        print('Folder chosen! path: ' + folderpath)
        # Create QMdiSubWindow with Ui_WidgetTiff
        sub = DesignerSubWindowFolder(rootpath=folderpath)
        sub.slot_open_tiff.connect
        print('DesignerSubWindowFolder "sub" created')
        print('Set "sub" widget to "Ui_WidgetFolderTree"')
        sub.setWindowTitle('Folder View: ' + folderpath)
        self.mdiArea.addSubWindow(sub)
        print('"sub" added to MDI')
        sub.show()

    def select_file(self):
        """opens a file select dialog"""
        # open the dialog and get the selected .txt file
        print('Choosing file... ')
        filename, _filter = QFileDialog.getOpenFileName(None, "Open File",
                                                        '.', ";TIFF (*.tif *.tiff)")
        # fname, _ = QFileDialog.getOpenFileName(self, 'Open file')
        print('File chosen! file: ' + filename + ' ' + _filter)
        # print('File chosen!')
        # if a file is selected
        if filename:
            print('Chose filename: ' + filename)
            # update the lineEdit text with the selected filename
            # self.mpllineEdit.setText(filename)



class DesignerSubWindowTiff(QWidget, Ui_WidgetTiff):
    """Customization for WidgetTiff subwindow for an MDI"""
    def __init__(self, parent=None, filepath=None):
        # initialization of the superclass
        super(DesignerSubWindowTiff, self).__init__(parent)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        self.horizontalScrollBar.valueChanged['int'].connect(self.update_video)

        # Using skimage aka scikit-image from SciPy
        self.filepath = filepath
        f = PurePath(filepath)
        self.video_name = f.stem
        self.video_ext = f.suffix
        self.video_file = io.imread(filepath)
        self.video_shape = self.video_file.shape
        self.num_frames = self.video_file.shape[0]
        print('video shape: ', self.video_shape)
        print('Width x Height: ', self.video_file.shape[1], self.video_file.shape[2])
        print('# of Frames: ', self.num_frames)
        self.horizontalScrollBar.setMinimum(1)
        self.horizontalScrollBar.setMaximum(self.num_frames - 1)
        self.update_video(1)

    def update_video(self, frame=0):
        """Updates the graph with new letters frequencies"""

        # get the letters frequencies
        # l, v = self.parse_file(self.mpllineEdit.text())
        print('Updating video plot in a subWindow with:')
        print('***' + self.video_name + '[' + str(frame) + ']')
        # clear the Axes
        self.mpl.canvas.ax.clear()
        data = [random.random() for i in range(5)]
        # self.mpl.canvas.ax.plot(data, 'r-')
        # self.mpl.canvas.ax.plot([1, 2, 3, 4, 5])
        # self.mpl.canvas.ax.set_ylabel('some numbers')
        # with TiffFile(filepath) as tif:
        #     # image_stack = tif.asarray()
        #     for page in tif.pages:
        #         for tag in page.tags.values():
        #             tag_name, tag_value = tag.name, tag.value
        #         image = page.asarray()

        # show the image
        self.mpl.canvas.ax.imshow(self.video_file[frame-1], cmap='gray')
        print('imshow called')
        self.mpl.canvas.ax.axis('off')
        self.mpl.canvas.draw()


class DesignerSubWindowFolder(QWidget, Ui_WidgetFolderTree):
    """Customization for WidgetFolderTree subwindow for an MDI"""
    def __init__(self, parent=None, rootpath=None):
        # initialization of the superclass
        super(DesignerSubWindowFolder, self).__init__(parent)
        dir = QDir(rootpath)
        # setup the GUI --> function generated by pyuic4
        self.setupUi(self)
        print('WidgetFolderTree UI setup')
        self.model = QFileSystemModel()
        self.model.setRootPath(rootpath)
        self.treeView.setModel(self.model)
        print('WidgetFolderTree model set')
        self.treeView.setRootIndex(self.model.index(rootpath))
        print('WidgetFolderTree root set')


        self.pushButtonOpen.triggered.connect(self.slot_open_tiff())

    # @QtCore.pyqtSlot(QtCore.QModelIndex)
    # def slot_open_tiff(self):




# create the GUI application
app = QApplication(sys.argv)
# instantiate the main window
dmw = DesignerMainWindow()
# show it
dmw.show()
# start the Qt main loop execution, exiting from this script
# with the same return code of Qt application
sys.exit(app.exec_())
